#!/usr/bin/env pypy
# -*- coding: utf-8 -*-

# Tuenti Challenge 3
#
# Challenge 20 - Alien invasion

# All your base are belong to us!



# Ciphertext located at address 0x8048148, in file offset 0x148

# Original ciphertext
ciphertext = [  0x78, 0xae, 0x27, 0x55, 0xed, 0xf5, 0x87, 0xda,
                0x55, 0xda, 0x55, 0x75, 0x90, 0xe0, 0x3d, 0xf4,
                0x4f, 0xaf, 0x2c, 0xab, 0x5f, 0x11, 0xc2, 0x31,
                0x7b, 0xae, 0x4b, 0x7e, 0xb3, 0x80, 0x0f, 0x6a,
                0x2d, 0xa7, 0x4a, 0x67, 0x48 
             ]

'''
# Test ciphertext                
ciphertext = [  0x78, 0xa3, 0x65, 0x55, 0xed, 0xf5, 0x90, 0xda,
                0x54, 0xda, 0x5c, 0x68, 0xc8, 0xe1, 0x75, 0xd6,
                0x42, 0xb7, 0x7e, 0x86, 0x0a, 0x17, 0x92, 0x65,
                0x0c, 0xae, 0x47, 0x78, 0xf7
             ]
'''

if __name__ == '__main__':
    key = ""
    v18 = 0x539
    for b in ciphertext:
        t = v18 * 0x41a7
        v18 = ((v18 * 0x41a7) & 0xffffffff) % 0x7ffffff
        c = (v18 & 0xff) ^ b
        key += chr(c)
        
    print key


'''
   0x080480b8:	push   %ebp
   0x080480b9:	mov    %esp,%ebp
   0x080480bb:	push   %edi
   0x080480bc:	push   %esi
   0x080480bd:	push   %ebx
   0x080480be:	sub    $0x10,%esp
   0x080480c1:	mov    0x4(%ebp),%eax
   0x080480c4:	lea    0x8(%ebp),%edi
   0x080480c7:	mov    %eax,-0x10(%ebp)
   0x080480ca:	xor    %edx,%edx
   0x080480cc:	mov    $0x1a,%eax
   0x080480d1:	mov    %edx,%ebx
   0x080480d3:	mov    %edx,%ecx
   0x080480d5:	mov    %edx,%esi
   0x080480d7:	int    $0x80
   0x080480d9:	xor    %eax,%eax
   0x080480db:	jne    0x804813c
   0x080480dd:	cmpl   $0x2,-0x10(%ebp)
   0x080480e1:	jne    0x804813c
   0x080480e3:	mov    0x4(%edi),%edi
   0x080480e6:	mov    %edi,-0x1c(%ebp)
   0x080480e9:	movl   $0x539,-0x18(%ebp)
   0x080480f0:	jmp    0x804812b

v18 = (v18 * 0x41a7) % 0x7ffffff

=> 0x080480f2:	imul   $0x41a7,-0x18(%ebp),%eax
   0x080480f9:	mov    %eax,-0x10(%ebp)
   0x080480fc:	mov    $0x7ffffff,%esi
   0x08048101:	xor    %edx,%edx
   0x08048103:	div    %esi
   0x08048105:	mov    %edx,-0x18(%ebp)

   0x08048108:	mov    %edi,%esi
   0x0804810a:	sub    -0x1c(%ebp),%esi
   0x0804810d:	cmp    $0x24,%esi
   0x08048110:	ja     0x8048127

b = (v18 & 0xFF) ^ arg[pos]

   0x08048112:	and    $0xff,%edx
   0x08048118:	xor    %edx,%ecx
   0x0804811a:	movzbl 0x8048148(%esi),%eax
   0x08048121:	cmp    %eax,%ecx
   0x08048123:	jne    0x8048127
   0x08048125:	jmp    0x804812a

   0x08048127:	or     $0xffffffff,%ebx
   0x0804812a:	inc    %edi

   0x0804812b:	movsbl (%edi),%ecx
   0x0804812e:	test   %cl,%cl
   0x08048130:	jne    0x80480f2
   0x08048132:	sub    -0x1c(%ebp),%edi
   0x08048135:	cmp    $0x24,%edi
   0x08048138:	jbe    0x804813c
   0x0804813a:	jmp    0x804813f
   0x0804813c:	or     $0xffffffff,%ebx
   0x0804813f:	mov    $0x1,%eax
   0x08048144:	int    $0x80
   0x08048146:	jmp    0x8048146

0x8048148:	0x78	0xae	0x27	0x55	0xed	0xf5	0x87	0xda
0x8048150:	0x55	0xda	0x55	0x75	0x90	0xe0	0x3d	0xf4
0x8048158:	0x4f	0xaf	0x2c	0xab	0x5f	0x11	0xc2	0x31
0x8048160:	0x7b	0xae	0x4b	0x7e	0xb3	0x80	0x0f	0x6a
0x8048168:	0x2d	0xa7	0x4a	0x67	0x48
'''
